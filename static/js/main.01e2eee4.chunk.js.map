{"version":3,"sources":["functions/Parser.js","components/CardContent.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["ParseWeatherToIcon","rangeId","Container","styled","div","WeatherIcon","i","WeatherMaxMin","CardContent","weather","title","className","id","temp_max","temp_min","Title","WeatherInfo","UserInput","initialData","location","description","temp","Weather","useState","setWeather","onSubmit","e","preventDefault","city","url","fetch","then","response","json","data","console","log","main","catch","err","alert","placeholder","type","onChange","target","value","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"kPAWeA,EAXY,SAACC,GACxB,OAAgB,MAAZA,EAAwB,kBACnBA,GAAW,KAAOA,GAAW,IAAa,eAC1CA,GAAW,KAAOA,GAAW,IAAa,gBAC1CA,GAAW,KAAOA,GAAW,IAAa,aAC1CA,GAAW,KAAOA,EAAU,IAAc,qBAC1CA,GAAW,KAAOA,GAAW,IAAa,aAC1CA,GAAW,KAAOA,GAAW,IAAa,aAC5C,Y,mbCHX,IAAMC,EAAYC,IAAOC,IAAV,KAMTC,EAAcF,IAAOG,EAAV,KAIXC,EAAgBJ,IAAOC,IAAV,KAuBJI,EAfK,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACnB,OACI,kBAACP,EAAD,KACI,4BAAKO,EAAQC,OACb,kBAACL,EAAD,CAAaM,UAAWX,EAAmBS,EAAQG,MAGnD,kBAACL,EAAD,KACI,2BAAIE,EAAQI,SAAZ,SACA,2BAAIJ,EAAQK,SAAZ,Y,mgBC3BhB,IAAMC,EAAQZ,IAAOC,IAAV,KAWLY,EAAcb,IAAOC,IAAV,KAKXa,EAAYd,IAAOC,IAAV,KAKTc,EAAc,CAChBC,SAAU,UACVT,MAAO,MACPU,YAAa,GACbP,SAAU,IACVC,SAAU,IACVO,KAAM,IACNT,IAAK,GAwDMU,EArDC,WAAO,IAAD,EACYC,mBAASL,GADrB,mBACXT,EADW,KACFe,EADE,KAoClB,OACI,6BACI,kBAACT,EAAD,oBACA,kBAACC,EAAD,KACI,kBAAC,EAAD,CAAaP,QAASA,KAE1B,kBAACQ,EAAD,KACI,0BAAMQ,SAZG,SAACC,GAClBA,EAAEC,iBA3BW,SAACC,GACd,IAAMC,EAAG,2DAAuDD,EAAvD,kBAHG,mCAGH,iBACTE,MAAMD,GACDE,MAAM,SAAAC,GAAQ,OAAIA,EAASC,UAC3BF,MAAM,SAAAG,GACHC,QAAQC,IAAIF,GACZV,EAAW,2BACJf,GADG,IAENC,MAAOwB,EAAKzB,QAAQ,GAAG4B,KACvBjB,YAAac,EAAKzB,QAAQ,GAAGW,YAC7BP,SAAUqB,EAAKG,KAAKxB,SACpBC,SAAUoB,EAAKG,KAAKvB,SACpBO,KAAMa,EAAKzB,QAAQ,GAAG4B,KAAKhB,KAC3BT,GAAIsB,EAAKzB,QAAQ,GAAGG,SAG3B0B,OAAO,SAAAC,GAAG,OAAIC,MAAM,8BAYzBR,CAASvB,EAAQU,YAWL,2BAAOsB,YAAa,UAAWC,KAAM,OAAQC,SApBxC,SAACjB,GAClBF,EAAW,2BACJf,GADG,IAENU,SAAUO,EAAEkB,OAAOC,YAkBX,4BAAQlC,UAAW,8BCvExBmC,MAPf,WAEE,OACI,kBAAC,EAAD,OCMcC,QACW,cAA7BC,OAAO7B,SAAS8B,UAEe,UAA7BD,OAAO7B,SAAS8B,UAEhBD,OAAO7B,SAAS8B,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB3B,MAAK,SAAA4B,GACJA,EAAaC,gBAEdtB,OAAM,SAAAuB,GACL1B,QAAQ0B,MAAMA,EAAMC,c","file":"static/js/main.01e2eee4.chunk.js","sourcesContent":["const ParseWeatherToIcon = (rangeId) => {\n    if (rangeId === 800) return 'wi wi-day-sunny';\n    else if (rangeId >= 801 && rangeId <= 804)  return 'wi wi-cloudy';\n    else if (rangeId >= 300 && rangeId <= 321)  return 'wi wi-showers';\n    else if (rangeId >= 500 && rangeId <= 521)  return 'wi wi-rain';\n    else if (rangeId >= 200 && rangeId < 232)   return 'wi wi-thunderstorm';\n    else if (rangeId >= 600 && rangeId <= 622)  return 'wi wi-snow';\n    else if (rangeId >= 701 && rangeId <= 781)  return 'wi wi-dust';\n    return 'wi wi-na';\n}\n\nexport default ParseWeatherToIcon","import React from 'react'\nimport 'weather-icons/css/weather-icons.css'\nimport styled from '@emotion/styled'\nimport ParseWeatherToIcon from '../functions/Parser'\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n`\n\nconst WeatherIcon = styled.i`\n    font-size: 50px;\n`\n\nconst WeatherMaxMin = styled.div`\n    display: flex;\n    justify-content: space-between;\n    font-size: 20px;\n    min-width: 200px;\n    margin-top: 20px;\n`\n\nconst CardContent = ({ weather }) => {\n    return (\n        <Container>\n            <h2>{weather.title}</h2>\n            <WeatherIcon className={ParseWeatherToIcon(weather.id)}>\n\n            </WeatherIcon>\n            <WeatherMaxMin>\n                <p>{weather.temp_max}ºC</p>\n                <p>{weather.temp_min}ºC</p>\n            </WeatherMaxMin>\n        </Container>\n    );\n}\n\nexport default CardContent","import React, { useState } from 'react'\nimport CardContent from \"./CardContent\";\nimport 'weather-icons/css/weather-icons.css'\nimport styled from '@emotion/styled'\n\nconst Title = styled.div`\n    display: flex;\n    justify-content: center;\n    font-size: 40px;\n    background-color: #3581B8;\n    padding: 20px;\n    flex-wrap: wrap;\n    color: #EBE9E9;\n    text-shadow: 2px 2px #FCB07E;\n`\n\nconst WeatherInfo = styled.div`\n    display: flex;\n    justify-content: center;\n`\n\nconst UserInput = styled.div`\n    display: flex;\n    justify-content: center;\n`\n\nconst initialData = {\n    location: 'Coimbra',\n    title: '...',\n    description: '',\n    temp_max: '0',\n    temp_min: '0',\n    temp: '0',\n    id: -1,\n}\n\nconst Weather = () => {\n    const [weather, setWeather] = useState(initialData)\n\n    const API_KEY = '63f26d323a9e3545b746bba6364e73b4';\n\n    const response = (city) => {\n        const url = `http://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`;\n        fetch(url)\n            .then( response => response.json())\n            .then( data => {\n                console.log(data)\n                setWeather({\n                    ...weather,\n                    title: data.weather[0].main,\n                    description: data.weather[0].description,\n                    temp_max: data.main.temp_max,\n                    temp_min: data.main.temp_min,\n                    temp: data.weather[0].main.temp,\n                    id: data.weather[0].id,\n                });\n            })\n            .catch( err => alert('Location does not exit!'))\n    }\n\n    const handleChange = (e) => {\n        setWeather( {\n            ...weather,\n            location: e.target.value,\n        })\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        response(weather.location)\n    }\n\n    return (\n        <div>\n            <Title>Weather app</Title>\n            <WeatherInfo>\n                <CardContent weather={weather} />\n            </WeatherInfo>\n            <UserInput>\n                <form onSubmit={handleSubmit}>\n                    <input placeholder={'Coimbra'} type={'text'} onChange={handleChange}/>\n                    <button className={'wi wi-direction-right'}></button>\n                </form>\n            </UserInput>\n        </div>\n\n    );\n}\n\nexport default Weather","import React from 'react';\nimport Weather from './components/Weather'\n\nfunction App() {\n\n  return (\n      <Weather />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}